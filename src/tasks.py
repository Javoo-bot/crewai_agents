# src/your_project/tasks.py
from crewai import Task
from src.research_bot.agents import alex, jordan, taylor, morgan, casey, riley
from src.research_bot.tools.remote_executor_tool import execute_remote_command
from src.research_bot.tools.logger_tool import log_command_output

# 1. Alex genera estrategia
generate_strategy_task = Task(
  description=(
    "Generate a complete vulnerability scanning strategy for the target machine at {target_ip}."
    " Your strategy must include a logical sequence of commands starting with recon and ending in exploitation,"
    " based on the following scan description: {scan_description}."
  ),
  expected_output="A JSON with a list of shell commands and a description for each step.",
  agent=alex
)

# 2. Jordan revisa estrategia
review_strategy_task = Task(
  description=(
    "Review the proposed vulnerability scan strategy generated by Alex for {target_ip}.\n"
    "Check for correctness, logic, completeness, and security. Give detailed feedback."
  ),
  expected_output="A JSON with `approved` boolean and `feedback` string.",
  agent=jordan
)

# 3. Taylor ejecuta la estrategia
execute_strategy_task = Task(
  description=(
    "Execute each command from the validated vulnerability scanning strategy on a remote Kali Linux machine."
    " Use SSH to connect and execute. If a command fails or requires input, document it."
  ),
  expected_output="Full terminal output from the remote execution, including any errors.",
  agent=taylor,
  tools=[execute_remote_command, log_command_output]
)

# 4. Morgan monitorea el output
monitor_command_output_task = Task(
  description=(
    "Analyze the terminal output from each command and determine whether user input is needed."
    " If yes, suggest next input or action."
  ),
  expected_output="JSON with `input_needed: true/false` and a `reasoning` explanation.",
  agent=morgan
)

# 5. Casey arregla errores
handle_error_task = Task(
  description=(
    "Analyze command execution errors and provide fixes with explanations."
    " Your answer should include the reason for the error and shell commands to fix it."
  ),
  expected_output="A JSON with `fix` (list of shell commands) and `explanation` (text).",
  agent=casey
)

# 6. Riley genera el reporte
write_report_task = Task(
  description=(
    "Based on the findings of the vulnerability scan, write a professional Markdown report."
    " The report should include a title, executive summary, findings section, and recommendations."
  ),
  expected_output="A full Markdown (.md) report suitable for a client.",
  agent=riley
)
